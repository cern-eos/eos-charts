global:
  # -- Set this to the domain name of your cluster if it does not use the kubernetes default.
  clusterDomain: "cluster.local"

replicaCount: 4

image:
  # -- image repository for fst image
  repository: gitlab-registry.cern.ch/dss/eos/eos-all
  # -- FST image tag
  tag: 4.8.78
  # -- FST image pullPolicy
  pullPolicy: Always

# -- SSS keytab (needed to authenticate against other EOS components).
#
#   The name of the kubernetes secret containing the eos keytab to use.
#   Can be helpful when deploying fst in standalone mode using a custom keytab.
#
#   Warning: This chart does not automatically create any secret.
#     The secret storing they key should be pre-created and its name passed here.
#     Docs to create secrets: https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-kubectl/
#
#   When creating the secret, the key in the data fragment must be 'eos.keytab':
#     ~# kubectl create secret generic test-keytab --from-file=eos.keytab
#     secret/test-keytab created
#     ~# kubectl describe secret test-keytab
#     [...]
#     Data
#     ====
#     eos.keytab:  138 bytes
#
#   Default: eos-sss-keytab
#     Can be overriden by .Values.global.sssKeytab.secret
sssKeytab:
  secret:


# -- Assign fst pods to a node with a specific label
#    and distribute them on different nodes to avoid single points of failure.
#
podAssignment:
  # -- If true, requires a node labeled as per customLabels.
  enableNodeSelector: false
  # -- If true, shard the stateful set on as many nodes as possible.
  #    Highly recommended for production scenarios.
  enablePodAntiAffinity: true


# -- Custom labels to identify eos fst pods.
#
#   They are used by node selection, if enabled (see above).
#   Label nodes accordingly to avoid scheduling problems.
#
customLabels:
  service: eos
  component: eos-fst


# -- Security context.
#
#   Define the security context for all containers (including initContainers) of the fst pod.
#   Docs at https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
#
#   Default:
#     - privileged: false
#     - allowPrivilegeEscalation: false
securityContext:
  # -- If true, the container will run in privileged mode.
  privileged: false
  # -- If true, a process can gain more privileges than its parent process.
  allowPrivilegeEscalation: false


# -- Network configuration.
#
#   hostNetwork allows the pod to use the host network namespace.
#     Available options: true, false
#     Default: false
hostNetwork: false

# -- dnsPolicy regulates how the pod resolves hostnames with DNS servers.
#    In case hostNetwork is set to true, dnsPolicy must be ClusterFirstWithHostNet
#    Documentation: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
#    Available options: Default, ClusterFirst, ClusterFirstWithHostNet, None
#    Default: ClusterFirst
dnsPolicy: ClusterFirst

# -- External services for FSTs, so each one can be individually reached from outside the cluster (requires a LBaaS).
#    They will be created based on the template if enabled is 'true'. Probably only makes sense for LoadBalancer-type services.
#    If you want to specify the LB IP addresses of each service, fill the loadBalancerIPs list (must be the same length as the FST replicaCount).
externalService:
  enabled: false
  annotations:
  template:
    type: LoadBalancer
  loadBalancerIPs: []

# -- Service port declaration for fst.
#    These are the ports exposed by the Kubernetes service.
#    Defaults:
#     - xrootd_fst:   1095
#     - microhttp:    8001
#     - xrootd_https: 8443
#   Values can be overridden with:
#   - .Values.ports.{xrtood_fst, microhttp, xrootd_https} below
#   - Global .Values.global.ports.<service_name> in a parent chart.
#     Global takes precedence over local values.
ports:
  xrootd_fst:
  microhttp:
  xrootd_https:

# -- Short hostnames of the components to be reached from the fst.
#    The corresponding FQDNs are generated appending the namespace and '.svc.{{ .Values.global.clusterDomain }}'.
#    These values depend on the Helm release name given to each component.
#    Leave them blank to let Helm infer the names automatically according to .Release.Name
#    Values can be overriden with:
#      - .Values.hostnames.{mgm, mq, qdbcluster}
#      - Global .Values.global.hostnames.{mgm, mq, qdbcluster} in a parent chart.
#     Global takes precedence over local values.
hostnames:
  # -- Hostname of the mgm.
  mgm: ""
  # -- Hostname of the mq (aka, broker)
  mq: ""
  # -- Hostname of the quarkdb cluster.
  qdbcluster: ""

# -- Self-registration of the FST filesystem in EOS
#    When enabled, the FST will register the available filesystem upon booting.
#    It is possible to configure:
#     - the eos space where the file system should be added,
#     - how many filesystems can end up in one scheduling group,
#     - the maximum number of groups in the space,
#     - the configuration of the filesystem (rw|wo|ro|drain|draindead|off|empty).
#   Note:
#     - <groupsize>=0 means that no groups are built within a space. Must be an integer <=1024.
#     - <groupmod>=24 comes as default per eos internals. Must be an integer <=256.
selfRegister:
  enable: true
  space: default
  groupsize: 0
  groupmod: 24
  config: rw


# -- EOS GeoTag
#
#   Tag storage node with their geographical location
#   Docs: https://eos-docs.web.cern.ch/configuration/geotags.html
#
#   Defaults to "docker::k8s"
#   GeoTag can be overriden with:
#    - .Values.geotag
#    - Global .Values.global.hostname.eos.geotag in a parent chart.
#    Global takes precedence over local values.
geotag: ""


# -- EOS minimum size of filesystem on FST to allow writes
#    See EOS_FS_FULL_SIZE_IN_GB in
#    https://gitlab.cern.ch/dss/eos/-/blob/master/fst/storage/Storage.cc
minFsSizeGb: 5


# Additional Extra environment variables
#   Several formats of defining variables are supported, including:
#     ```
#     extraEnv:
#       ENV_VAR1: var1
#       ENV_VAR2: var2
#     ```
#   or
#     ```
#     extraEnv:
#     - name: ENV_VAR1
#       value: "var1"
#     - name: ENV_VAR2
#       value: "var2"
#     ```
extraEnv:

#
# -- Manage persistence of data stored by FSTs, namely the actual bytes of files stored in EOS.
#
#    If persistence is not enabled, data stored in FSTs will not survive the restart of pods.
#    It is recommended to configure persistence according to the hosting infrastructure.
#
#    The persistency can be configured by setting the `enabled` flag:
#     - false:
#       No persistence provided. Data is stored in emptyDir volumes.
#     - true:
#       Persistence provided by mounting a PersistentVolume via a claim. Requires either:
#       - a dynamic provisioner (for example, on Openstack, Cinder CSI or Manila CSI), or
#       - statically provisioned PersistentVolumes pre-created by an administrator
#
#     Note that each FST requires its own separate and independent storage location.
#     When using a shared filesystem as persistent backend, each PV must live in a separate directory.
#     This is handed automatically in the case of a dynamic provisioner,
#     and must be configured manually (by use of 'path' and 'claimRef') in the case of static PVs.
#       Docs: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
#
#     Additional parameters:
#     - storageClass: If set to "-", disable dynamic provisioning.
#                     If undefined or null, the default provisioner is chosen.
#     - accessModes: How to access the pvc (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
#     - size: Size of the pvs (example, 10Gi)
#     - annotations: Custom annotations on the pvc, in key:value format
#
# The persistence type can be overriden via .Values.global.persistence.enabled.
#
persistence:
  enabled: false
  storageClass: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 1Ti

#
# Define an initContainer to run an arbitrary script before the main FST process starts.
# 'spec' can define any initContainer parameters (e.g. env) except:
#   name, image, imagePullPolicy, command, and volumeMounts (which has its own configurable value).
#   The pod-wide definitions for these volumes should be set in extraVolumes.volumes.
# Example:
#initContainer:
#  enabled: true
#  script: |
#    #!/bin/bash
#    echo $GREETING
#  spec:
#    env:
#      - name: GREETING
#        value: "Good day sir"
initContainer:
  enabled: false
  script:
  spec:
  volumeMounts:

#
# Mount arbitrary volumes (any type except PVC, which requires volumeClaimTemplates) for FST.
# 'volumes' creates pod-wide volume definitions while 'volumeMounts' are only for the main FST container.
# This feature can be used to insert TLS certificates into the pod.
#
extraVolumes:
  volumes:
  volumeMounts:

#
# Enable or disable health probes for fst.
#   Docs: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
#
# Liveness Probe:
#   Checks every 10 seconds whether it is possible to open a TCP socket against port 1095.
#   The fst container will be restarted after 3 failures.
#
# Default: All probes enabled.
#   This can be overridden with:
#   - .Values.probes.liveness below
#   - Global .Values.global.probes.fst_liveness in a parent chart.
#       Global takes precedence over local values.
#
probes:
  liveness: true

#
# -- HTTP access configuration.
#
#   At the moment, this in only compatible with the container images produced in the EOS CI.
#   Proper configuration will be implemented in the future if needed.
#
#   Default: false
#
http:
  enabled: false

# keytab:
#   name: default-keytab
