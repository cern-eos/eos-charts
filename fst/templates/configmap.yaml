apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fst.fullname" . }}-cfgmap-xrd-cf-fst
  labels:
    {{- include "fst.labels" . | nindent 4 }}
data:
  xrd.cf.fst: |
    ###########################################################
    xrootd.fslib -2 libXrdEosFst.so
    xrootd.async off nosf
    xrd.network keepalive
    ###########################################################
    xrootd.seclib libXrdSec.so
    sec.protocol unix
    sec.protocol sss -c /etc/eos.keytab -s /etc/eos.keytab
    sec.protbind * only unix sss
    ###########################################################
    all.export / nolock
    all.trace none
    all.manager localhost 2131
    #ofs.trace open
    ###########################################################
    xrd.port 1095
    ofs.persist off
    ofs.osslib libEosFstOss.so
    ofs.tpc pgm /opt/eos/xrootd/bin/xrdcp
    ###########################################################
    fstofs.broker root://{{ include "utils.mq_hostname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:1097//eos/
    fstofs.autoboot true
    fstofs.quotainterval 10
    fstofs.metalog /var/eos/md/
    fstofs.fmddict /var/eos/md/fstfmd.dict
    ##### QuarkDB #############################################
    fstofs.qdbcluster {{ include "utils.qdbcluster_hostname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:7777
    fstofs.qdbpassword_file /etc/eos.keytab
    {{- if eq (include "utils.httpAccess.enabled" .) "true" }}
    ##### HTTP ################################################
    all.sitename eosdockertest
    http.exthandler EosFstHttp libEosFstHttp.so none
    http.exthandler xrdtpc libXrdHttpTPC.so
    http.trace all
    xrd.protocol XrdHttp:8443 libXrdHttp.so
    xrd.timeout idle 86400
    xrd.tlsca certdir /etc/grid-security/certificates/
    xrd.tls /etc/grid-security/daemon/hostcert.pem /etc/grid-security/daemon/hostkey.pem
    {{- end }}
    ###########################################################

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fst.fullname" . }}-cfgmap-fst-init
  labels:
    {{- include "fst.labels" . | nindent 4 }}
data:
  fst_init.sh: |
    #!/bin/bash
    set -x
    alias eos='eos -r 0 0'
    shopt -s expand_aliases

    init_probe() {
      local cmd=$@
      local max_wait=180
      local sleep=5
      start_time=$(date +%s)
      rc=-1
      while [ $rc -ne 0 ];
      do
        timeout --preserve-status $sleep $cmd >/dev/null 2>&1
        rc=$?

        # Bail out after max_wait
        tot_wait=$(($(date +%s)-start_time))
        echo "        $tot_wait seconds... (timeout at $max_wait)"
        if [ $tot_wait -ge $max_wait ]; then
          echo "ERROR: cmd \`$cmd\` failed after $tot_wait secs. Giving up."
          exit 1
        fi
        sleep $sleep
      done
    }

    # Wait for the MGM to be online before registering the node and the filesystem
    echo "INFO: Checking the MGM is online..."
    echo "INFO: EOS_MGM_URL="$EOS_MGM_URL
    init_probe eos ns
    echo "INFO: MGM is online."

    # Start the FST process in background so that we can run other commands
    echo "INFO: Starting FST..."
    /opt/eos/xrootd/bin/xrootd -n fst -c /etc/xrd.cf.fst -m -b -Rdaemon >/dev/null 2>&1

    # Local variables
    DATADIR=/fst_storage
    UUID=$(uuidgen)
    HOSTNAME=$(hostname -f)
    SPACE={{ default "default" .Values.selfRegister.space }}
    GROUPSIZE={{ default "0" .Values.selfRegister.groupsize }}
    GROUPMOD={{ default "24" .Values.selfRegister.groupmod }}
    CONFIG={{ default "rw" .Values.selfRegister.config }}

    # If there is an eos fsid || fsuuid, bail out
    if [ -f $DATADIR/.eosfsid ] || [ -f $DATADIR/.eosfsuuid ]; then
      echo "INFO: FS IDs already exist. Not configuring any further"
      echo "INFO: FS uuid is "$(cat $DATADIR/.eosfsuuid)
      exit 0
    fi

    # Write filesystem identifier
    echo "INFO: FS uuid is $UUID"
    echo "$UUID" > $DATADIR/.eosfsuuid
    chown daemon:daemon $DATADIR/.eosfsuuid

    # If needed, create the EOS space
    if [ $(eos space ls $SPACE -m | wc -l) -eq 0 ]; then
      echo "INFO: Space $SPACE does not exist. Creating..."
      eos space define $SPACE $GROUPSIZE $GROUPMOD
      eos space set $SPACE on
    fi

    # Set this node on
    echo "INFO: Enabling node..."
    eos node set $HOSTNAME:1095 on

    # Register filesystem
    echo "INFO: Registering filesystem..."
    eos fs add $UUID $HOSTNAME:1095 $DATADIR $SPACE $CONFIG

    # @note Enable the scheduling group the fst has been added to.
    #       ref. https://gitlab.cern.ch/eos/eos-charts/-/issues/41
    echo "INFO: Enabling scheduling group..."
    eos group set $(eos fs ls -m | grep $UUID | grep -o "schedgroup=[^,' ']*" | cut -d= -f2) on
    exit 0
---
{{- if .Values.initContainer.script }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fst.fullname" . }}-cfgmap-fst-initscript
  labels:
    {{- include "fst.labels" . | nindent 4 }}
data:
  initscript.sh: {{ .Values.initContainer.script }}
{{- end }}
