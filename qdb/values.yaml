#
# Set replicaCount to:
#   1 for standalone operation
#   3 (or more) to create a distributed cluster with raft consensus replication
#
replicaCount: 3

#
# The clusted ID is just a random string that identifies the cluster uniquely
#   See the docs at https://quarkdb.web.cern.ch/quarkdb/docs/master/configuration/
#
clusterID: 24964842-7852-48fd-bbb9-43beb5bfeea9

image:
  repository: gitlab-registry.cern.ch/dss/eos
  tag: 4.8.39
  pullPolicy: Always

#
# Assign qdb pod to a node with a specific label
#   and distribute them on different nodes to avoid single points of failure.
#
podAssignment:
  # If true, requires a node labeled as per customLabels (see below)
  enableNodeSelector: false
  # Shard the cluster members on different nodes
  enablePodAntiAffinity: false

#
# Custom labels to identify eos qdb pod(s).
#
# They are used by node selection, if enabled (see above).
# Label nodes accordingly to avoid scheduling problems.
#
customLabels:
  service: eos
  component: eos-qdb

#
# Network configuration.
#
# hostNetwork allows the pod to use the host network namespace.
#   Available options: true, false
#   Default: false
#
hostNetwork: false
#
# dnsPolicy regulates how the pod resolves hostnames with DNS servers.
#   In case hostNetwork is set to true, dnsPolicy must be ClusterFirstWithHostNet
#   Documentation: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
#   Available options: Default, ClusterFirst, ClusterFirstWithHostNet, None
#   Default: ClusterFirst
#
dnsPolicy: ClusterFirst
#
# Service ports declaration for qdb.
# These are the ports exposed by the Kubernetes service.
#
# Defaults:
#   - xrootd_qdb_http: 7777
#
# Values can be overridden with:
# - .Values.ports.xrootd_qdb_http below
# - Global .Values.global.ports.xrtood_qdb_httpd in a parent chart.
#     Global takes precedence over local values.
#
ports:
  xrootd_qdb_http:

#
# Manage persistence of data stored in QDB,
#   namely the instance configuration and the namespace data.
#
# If persistence is not enabled, data stored in QDB will not survive the restart of pods.
# It is recommended to configure persistence according to the hosting infrastrcuture.
#
# The following type of persistence are supported:
# - disabled:
#     No persistence provided. Data is stored in 'emptyDir'
#
# - hostpath:
#     Persistence provided by mounting a directory from the host filesystem.
#     Docs: https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
#     Additional parameters:
#     - path: Directory location on host (defaults to /var/eos/<qdb.fullname>)
#     - type: Type of mount (defaults to DirectoryOrCreate)
#
# - pvc:
#     Persistence provided by mounting a persistent volume.
#     Requires the availability of such feature on the hosting infrastructure.
#     Docs: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
#     Additional parameters:
#     - storageClass: If set to "-", disable dynamic provisioning.
#                     If undefined or null, the default provisioner is chosen.
#     - accessModes: How to access the pvc (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
#     - size: Size of the pvs (example, 10Gi)
#     - annotations: Custom annotations on the pvc, in key:value format
#
# The persistence type can be overriden via .Values.global.eos.persistence.type.
#
persistence:
  type: disabled
  #
  #type: hostpath
  #hostPath:
  #  path: ""
  #  type: ""
  #
  #type: pvc
  #pvc:
  #  storageClass: ""
  #  accessModes:
  #    - ReadWriteOnce
  #  size: 10Gi
  #  annotations: {}

startupProbe:
  enabled: false
  tcpSocket:
    host: mgm.outside.the.cluster
    port: 1094
  failureThreshold: 40
  periodSeconds: 10
