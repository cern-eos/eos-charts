# FIXME: Ideally, rely on the CI from:
# include:
#   - project: 'helm/charts/cern'
#     ref: master
#     file: '.gitlab-ci.yml'

variables:
  HELM_VERSION: v3.5.2
  HELM_CHART_REPO: eos

stages:
  - gen-docs
  - build
  - deploy

before_script:
  - mkdir -p .repo

gen-docs:
  stage: gen-docs
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - bin/helm-docs-diff

generate-json:
  stage: gen-json
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - |
        CHART=$(git diff-tree --name-only --no-commit-id HEAD origin/master)
        for base in $(find . -maxdepth 1 -type f | sed 's|./||' | xargs); do
            CHART=$(echo ${CHART} | sed "s|${base}||")
        done
        for chart in $CHART
        do
          python3 tools/generate-json-schema.py $chart
        done

build:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
    - for chart in $(ls -d */Chart.yaml | xargs dirname); do helm dep update ${chart}; helm lint ${chart}; helm package ${chart}; done
  except:
    - tags

version-check:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - |
        CHART=$(git diff-tree --name-only --no-commit-id HEAD origin/master)
        for base in $(find . -maxdepth 1 -type f | sed 's|./||' | xargs); do
            CHART=$(echo ${CHART} | sed "s|${base}||")
        done
        if [ "$(echo ${CHART} | wc -w)" = 0 ]; then
            echo "Changes do not affect charts. skipping"
            exit 0;
        elif [ "$(echo ${CHART} | wc -w)" != 1 ]; then
            echo "ERROR: You can only merge changes on one chart. Please fix before merging again."
            exit 1;
        else
            VDIFF="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "\-version:" || true)"
            if [ "${VDIFF}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            OLD_CHART_VERSION="$(echo "${VDIFF}" | awk '{print $2}')"
            # Check and accept if it's a new chart
            if [ "${OLD_CHART_VERSION}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            NEW_CHART_VERSION="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "+version:" | awk '{print $2}')"
        fi
    - |
        if [ ${NEW_CHART_VERSION} = "" ] || \
            [ $(expr ${NEW_CHART_VERSION} \<= ${OLD_CHART_VERSION}) -eq 1 ]; then
            echo "ERROR: Chart version must be higher than existent. Please fix before merging again."
            exit 1
        fi
  only:
    - master

deploy:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  before_script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
  script:
    - helm repo add ${HELM_CHART_REPO} https://registry.cern.ch/chartrepo/${HELM_CHART_REPO}
    - helm repo update
    - helm plugin install https://github.com/chartmuseum/helm-push
    - |
        set -x
        CHART=$(echo $CI_COMMIT_TAG | awk -F '@' '{print $1}')
        TAG_VERSION=$(echo $CI_COMMIT_TAG | awk -F '@' '{print $2}')

        test -f ${CHART}/Chart.yaml
        if [ $? -ne 0 ]; then
          echo "ERROR: Chart.yaml does not exist for chart ${CHART}"
          exit 1
        fi
        YAML_VERSION=$(cat ${CHART}/Chart.yaml | grep ^version | awk '{print $2}')
        if [[ "$TAG_VERSION" == "$YAML_VERSION" ]]; then
          helm dependency update ${CHART}
          helm cm-push ${CHART}/ ${HELM_CHART_REPO}
        else
          echo "ERROR: Chart version ($YAML_VERSION) differs from tag version ($TAG_VERSION)"
          exit 1
        fi
  only:
    - tags
