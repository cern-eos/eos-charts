# FIXME: Ideally, rely on the CI from:
# include:
#   - project: 'helm/charts/cern'
#     ref: master
#     file: '.gitlab-ci.yml'

variables:
  HELM_VERSION: v3.5.2
  HELM_CHART_REPO: eos

stages:
  - build
  - test
  - deploy

before_script:
  - mkdir -p .repo

build:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
    - for chart in $(ls -d */Chart.yaml | xargs dirname); do helm dep update ${chart}; helm lint ${chart}; helm package ${chart}; done
  except:
    - tags

version-check:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - |
        CHART=$(git diff-tree --name-only --no-commit-id HEAD origin/master)
        for base in $(find . -maxdepth 1 -type f | sed 's|./||' | xargs); do
            CHART=$(echo ${CHART} | sed "s|${base}||")
        done
        if [ "$(echo ${CHART} | wc -w)" = 0 ]; then
            echo "Changes do not affect charts. skipping"
            exit 0;
        elif [ "$(echo ${CHART} | wc -w)" != 1 ]; then
            echo "ERROR: You can only merge changes on one chart. Please fix before merging again."
            exit 1;
        else
            VDIFF="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "\-version:" || true)"
            if [ "${VDIFF}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            OLD_CHART_VERSION="$(echo "${VDIFF}" | awk '{print $2}')"
            # Check and accept if it's a new chart
            if [ "${OLD_CHART_VERSION}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            NEW_CHART_VERSION="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "+version:" | awk '{print $2}')"
        fi
    - |
        if [ ${NEW_CHART_VERSION} = "" ] || \
            [ $(expr ${NEW_CHART_VERSION} \<= ${OLD_CHART_VERSION}) -eq 1 ]; then
            echo "ERROR: Chart version must be higher than existent. Please fix before merging again."
            exit 1
        fi
  only:
    - master


eos_systest:
  stage: test
  image: 
    name: gitlab-registry.cern.ch/dss/alpine-enhanced:3.13.5
  before_script:
    - export KUBECONFIG=$K8S_CONFIG
    - export K8S_NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr '_' '-' | tr '[:upper:]' '[:lower:]')
  script:
    - for chart in $(ls -d */Chart.yaml | xargs -I{} dirname {}); do helm dep update ${chart}; done
    - helm install eos ./server/ --create-namespace --namespace $K8S_NAMESPACE --set fst.replicaCount=8 --wait --timeout 300s
    - kubectl exec --namespace $K8S_NAMESPACE eos-mgm-0 -- eos space define default 8 1
    - kubectl exec --namespace $K8S_NAMESPACE eos-mgm-0 -- bash -c 'for i in $(seq 1 8); do eos fs mv --force ${i} default.0; done'
    - kubectl exec --namespace $K8S_NAMESPACE eos-mgm-0 -- eos space quota default on
    - kubectl exec --namespace $K8S_NAMESPACE eos-mgm-0 -- eos-instance-test
  after_script:
    - export KUBECONFIG=$K8S_CONFIG
    - export K8S_NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr '_' '-' | tr '[:upper:]' '[:lower:]')
    - helm uninstall eos
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

deploy:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  before_script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
  script:
    - helm repo add ${HELM_CHART_REPO} https://registry.cern.ch/chartrepo/${HELM_CHART_REPO}
    - helm repo update
    - helm plugin install https://github.com/chartmuseum/helm-push
    - |
        set -x
        EOS_COMPONENTS=$(find . -type f -name '*Chart.yaml*' | sed -r 's|/[^/]+$||' | sort | uniq | sed 's/.\///g')
        TAG_COMPONENT=$(echo $CI_COMMIT_TAG | awk -F"-" '{print $1}')
        TAG_VERSION=$(echo $CI_COMMIT_TAG | awk -F"-" '{print $2}')
        echo "$CI_COMMIT_TAG => $TAG_COMPONENT => $TAG_VERSION"
        for chart in $(ls -d */Chart.yaml | xargs dirname); do
            for comp in $(echo $EOS_COMPONENT);do
            if [[ *"$TAG_COMPONENT"* == EOS_COMPONENT ]];then
                if [[ ${comp} == "$TAG_COMPONENT" && ${comp} == ${chart} ]];then
                  helm dependency update ${chart}
                  helm push ${chart}/ ${HELM_CHART_REPO}
                fi
            else
              helm dependency update ${chart}
              helm push ${chart}/ ${HELM_CHART_REPO}
            fi
            done
        done
  only:
    - tags
