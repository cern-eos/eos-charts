# FIXME: Ideally, rely on the CI from:
# include:
#   - project: 'helm/charts/cern'
#     ref: master
#     file: '.gitlab-ci.yml'

variables:
  HELM_VERSION: v3.2.4
  HELM_CHART_REPO: eos-sandbox

stages:
  - build
  - deploy
  - test

before_script:
  - mkdir -p .repo

build:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
    - for chart in $(ls -d */Chart.yaml | xargs dirname); do helm dep update ${chart}; helm lint ${chart}; helm package ${chart}; done
  except:
    - tags

version-check:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - |
        CHART=$(git diff-tree --name-only --no-commit-id HEAD origin/master)
        for base in $(find . -maxdepth 1 -type f | sed 's|./||' | xargs); do
            CHART=$(echo ${CHART} | sed "s|${base}||")
        done
        if [ "$(echo ${CHART} | wc -w)" = 0 ]; then
            echo "Changes do not affect charts. skipping"
            exit 0;
        elif [ "$(echo ${CHART} | wc -w)" != 1 ]; then
            echo "ERROR: You can only merge changes on one chart. Please fix before merging again."
            exit 1;
        else
            VDIFF="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "\-version:" || true)"
            if [ "${VDIFF}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            OLD_CHART_VERSION="$(echo "${VDIFF}" | awk '{print $2}')"
            # Check and accept if it's a new chart
            if [ "${OLD_CHART_VERSION}" == "" ]; then
                echo "${CHART} is a new chart, not checking version bump"
                exit 0;
            fi
            NEW_CHART_VERSION="$(echo "$(git diff origin/master -- $CHART/Chart.yaml)" | grep "+version:" | awk '{print $2}')"
        fi
    - |
        if [ ${NEW_CHART_VERSION} = "" ] || \
            [ $(expr ${NEW_CHART_VERSION} \<= ${OLD_CHART_VERSION}) -eq 1 ]; then
            echo "ERROR: Chart version must be higher than existent. Please fix before merging again."
            exit 1
        fi
  only:
    - master

deploy:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  before_script:
    - curl -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz; mkdir -p helm; tar zxvf helm.tar.gz -C helm; cp helm/linux-amd64/helm /usr/local/bin; rm -rf helm*
  script:
    - helm repo add ${HELM_CHART_REPO} https://registry.cern.ch/chartrepo/${HELM_CHART_REPO}
    - helm repo update
    - helm plugin install https://github.com/chartmuseum/helm-push
    - |
        set -x
        for chart in $(ls -d */Chart.yaml | xargs dirname); do
            helm push ${chart}/ ${HELM_CHART_REPO}
        done
  only:
    - tags


fusex_test:
  stage: test
  image: alpine/k8s:1.18.2
  before_script:
    - ./gitlab-ci/before_script-test.sh
  script:
    # enable krb5
    - kubectl exec -it eos-mgm-0 -- eos vid enable krb5
    # prepare mountpoints
    - kubectl exec -it eos-client-0 -- 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    # fusex benchmark
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "mkdir -p /eos1/dockertest/fusex_tests/ && cd /eos1/dockertest/fusex_tests/ && fusex-benchmark"'
    # download tests repo
    - kubectl exec -it eos-client-0 -- 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    # run the "ci" tests
    - kubectl exec -it eos-client-0 -- 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "python2 /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci"'
    - kubectl exec -it eos-client-0 -- 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n cleanup; done'
  after_script:
    - ./gitlab-ci/after_script-test.sh
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

cbox_test:
  stage: test
  image: alpine/k8s:1.18.2
  before_script:
    - ./gitlab-ci/before_script-test.sh
  script:
    # enable krb5
    - kubectl exec -it eos-mgm-0 -- eos vid enable krb5
    # enable converter and prepare eoshome folder, cernbox alike
    - kubectl exec -it eos-mgm-0 -- 'eos space config default space.converter=on'
    - kubectl exec -it eos-mgm-0 -- './eos_create_userhome.sh eos-user'
    # prepare mountpoints
    - kubectl exec -it eos-client-0 -- 'atd; at now <<< "mkdir -p /eos/ && mount -t fuse eosxd -ofsname=eosdockertest /eos/"'
    # set krb5 ticket and download tests repo
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "kinit eos-user@TEST.EOS -k -t /home/eos-user/eos-user.keytab"'
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "git clone https://gitlab.cern.ch/dss/eosclient-tests.git /eos/user/e/eos-user/eosclient-tests"'
    # launch the tests
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user ci-eosfuse_release"'
    - kubectl exec -it eos-client-0 -- 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user regression"'
  after_script:
    - ./gitlab-ci/after_script-test.sh
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/


system_test:
  stage: test
  image: alpine/k8s:1.18.2
  before_script:
    - ./gitlab-ci/before_script-test.sh
  script:
    - kubectl exec -it eos-mgm-0 -- 'eos-instance-test-ci'
    - kubectl exec -it eos-mgm-0 -- 'eos-unit-tests-with-instance -n root://localhost//eos/dockertest/'
  after_script:
    - ./gitlab-ci/after_script-test.sh
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/
