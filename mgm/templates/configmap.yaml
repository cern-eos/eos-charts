apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mgm.fullname" . }}-cfgmap-xrd-cf-mgm
  labels:
    {{- include "mgm.labels" . | nindent 4 }}
data:
  xrd.cf.mgm: |
    ###########################################################
    xrootd.fslib libXrdEosMgm.so
    xrootd.seclib libXrdSec.so
    xrootd.async off nosf
    xrootd.chksum eos
    ###########################################################
    
    xrd.sched mint 8 maxt 256 idle 64
    ###########################################################
    all.export /
    all.role manager
    ###########################################################
    oss.fdlimit 16384 32768
    ###########################################################
    # UNIX authentication
    sec.protocol unix
    # SSS authentication
    sec.protocol sss -c /etc/eos.keytab -s /etc/eos.keytab
    # KRB  authentication
    #TODO: (Enrico, 10/11) Disable krb5
    ##sec.protocol krb5 /etc/eos.krb5.keytab host/<host>@TEST.EOS
    # GSI authentication
    #sec.protocol gsi -crl:0 -cert:/etc/grid-security/daemon/hostcert.pem -key:/etc/grid-security/daemon/hostkey.pem -gridmap:/etc/grid-security/grid-mapfile -d:0 -gmapopt:2
    
    ###########################################################
    sec.protbind localhost.localdomain unix sss
    sec.protbind localhost unix sss
    #sec.protbind * only krb5 sss unix
    #TODO: (Enrico, 10/11) Disable krb5
    sec.protbind * only sss unix
    ###########################################################
    mgmofs.fs /
    mgmofs.targetport 1095
    #mgmofs.authlib libXrdAliceTokenAcc.so
    #mgmofs.authorize 1
    ###########################################################
    #mgmofs.trace all debug
    # this URL can be overwritten by EOS_BROKER_URL defined in /etc/sysconfig/eos
    # TODO: Removing this breaks the link between FSTs and MGM. Check!
    mgmofs.broker root://eos-mq-0.eos-mq.{{ .Release.Namespace }}.svc.cluster.local:1097//eos/
    
    # configuration and namespace location @note `mgmofs.cfgtype quarkdb` will move some to qdb
    mgmofs.configdir /var/eos/config
    mgmofs.metalog /var/eos/md
    mgmofs.txdir /var/eos/tx
    mgmofs.authdir /var/eos/auth
    # mgmofs.qosdir /var/eos/qos # @note (faluchet) see note on Qos Support
    
    # QoS configuration file
    # mgmofs.qoscfg /var/eos/qos/qos.conf # @note (faluchet) see note on Qos Support

    # report store path
    mgmofs.reportstorepath /var/eos/report
    
    # record store is enabled by default
    mgmofs.reportstore true
    
    # record namespace is disabled by default - can be enabled on the fly with the 'io' command
    mgmofs.reportnamespace false
    
    # this defines the default config to load
    mgmofs.autoloadconfig default
    
    # this enables that every change get's immedeatly stored to the active configuration - can be overwritten by EOS_AUTOSAVE_CONFIG defined in /etc/sysconfig/eos
    mgmofs.autosaveconfig true
    
    # this has to be defined if we have a failover configuration via alias - can be overwritten by EOS_MGM_ALIAS in /etc/sysconfig/eos
    #mgmofs.alias eosdev.cern.ch
    
    # Set the number of authentication worker threads running on the mgm
    mgmofs.auththreads 10
    
    # Set the front end port number for incoming authentication requests
    mgmofs.authport 15555
    
    ##### Namespace plugin implementation #####################
    #mgmofs.nslib /usr/lib64/libEosNsInMemory.so
    mgmofs.nslib /usr/lib64/libEosNsQuarkdb.so
    mgmofs.qdbcluster eos-qdb.{{ .Release.Namespace }}.svc.cluster.local:7777
    mgmofs.qdbpassword_file /etc/eos.keytab
    mgmofs.cfgtype quarkdb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mgm.fullname" . }}-cfgmap-mgm-init
  labels:
    {{- include "mgm.labels" . | nindent 4 }}
data:
  mgm_init.sh: |
    #!/bin/bash
    set -x

    handle_exit_condition () {
      local rc=$1
      local text=$2

      if [ $rc -ne 0 ]; then
        echo "  ✗ $text. Aborting."
        exit 1
      else
        echo "  ✓ Success!"
      fi
    }


    # Start the MGM process in background so that we can run other commands
    echo "INFO: Starting MGM..."
    /usr/bin/xrootd -n mgm -c /etc/xrd.cf.mgm -m -b -Rdaemon >/dev/null 2>&1

    # Wait for the MGM to be online
    echo "INFO: Waiting for the MGM to be online..."
    max_wait=600
    sleep=5
    start_time=$(date +%s)
    rc=-1
    while [ $rc -ne 0 ];
    do
      timeout --preserve-status $sleep eos ns >/dev/null 2>&1
      rc=$?
      sleep $sleep

      # Bail out after max_wait
      tot_wait=$(($(date +%s)-start_time))
      echo "        $tot_wait seconds... (timeout at $max_wait)"
      if [ $tot_wait -ge $max_wait ]; then
        echo "ERROR: MGM not reachable after $tot_wait secs. Giving up."
        exit 1
      fi
    done
    echo "INFO: MGM is online."


    ##
    ## Check if a previous configuration already exists. If so, don't touch.
    ##
    ## Previous version based on the existence of /var/eos/config
    ## Now, we chack if `default` configuration exists with `eos config ls`
    ##
    ## echo "INFO: Looking for previous EOS configurations..."
    ## if [ -d /var/eos/config/ ]; then
    ##   if [ $(find /var/eos/config -maxdepth 1 -type d | wc -l) -gt 1 ]; then
    ##     echo "  ✓ EOS configurations found. Exiting."
    ##     exit 0
    ##   fi
    ## fi
    ## echo "  ✓ None found. Configuring..."
    ##

    # Check if a previous configuration already exists. If so, don't touch.
    echo "INFO: Looking for previous EOS configurations..."
    if [ $(eos -b config ls | grep -w 'default' | wc -l) -eq 1 ]; then
      echo "  ✓ EOS configurations found. Exiting."
      exit 0
    fi
    echo "  ✓ None found. Configuring..."


    ### Authentication
    echo "INFO: Configuring authentication..."

    # Enable SSS
    echo "INFO: Enabling SSS..."
    eos -b vid enable sss
    handle_exit_condition $? "Error enabling SSS"

    # Give sudo powers to daemon user
    echo "INFO: Adding user 'daemon' to sudoers..."
    eos -b vid set membership daemon +sudo
    handle_exit_condition $? "Error adding user daemon to sudoers"

    echo "INFO: ✓ EOS autentication initialized successfully."


    ### Spaces and quota
    #
    # TODO: Space information is not loaded?!
    #
    # BUG!!
    # Space information is stored in the config file.
    # The MGM loads it at the next boot:
    # 201113 16:48:16 time=1605286096.702141 func=LoadConfig               level=NOTE  logid=06fe7f84-25d0-11eb-935c-0242ac110008 unit=mgm@eos-mgm-0.eos-mgm.default.svc.cluster.local:1094 tid=00007f1d9327a880 source=FileConfigEngine:243           tident=<service> sec=      uid=0 gid=0 name= geo="" IN ==> global:/config/eosdockertest/space/default#autorepair => off
    # 201113 16:48:16 time=1605286096.702161 func=LoadConfig               level=NOTE  logid=06fe7f84-25d0-11eb-935c-0242ac110008 unit=mgm@eos-mgm-0.eos-mgm.default.svc.cluster.local:1094 tid=00007f1d9327a880 source=FileConfigEngine:243           tident=<service> sec=      uid=0 gid=0 name= geo="" IN ==> global:/config/eosdockertest/space/default#balancer => off
    # 201113 16:48:16 time=1605286096.702171 func=LoadConfig               level=NOTE  logid=06fe7f84-25d0-11eb-935c-0242ac110008 unit=mgm@eos-mgm-0.eos-mgm.default.svc.cluster.local:1094 tid=00007f1d9327a880 source=FileConfigEngine:243           tident=<service> sec=      uid=0 gid=0 name= geo="" IN ==> global:/config/eosdockertest/space/default#balancer.node.ntx => 2
    #
    # But then `space ls` is empty
    # [root@eos-mgm-0 /]# eos space ls
    # [root@eos-mgm-0 /]# 
    #
    echo "INFO: Configuring space and quota..."

    # Define default space
    echo "INFO: Defining space default..."
    eos -b space define default
    handle_exit_condition $? "Error defining space default"

    # Activate default space
    echo "INFO: Activating space default..."
    eos -b space set default on
    handle_exit_condition $? "Error activating space default"

    ## # Turn-off quota for space default
    ## echo "INFO: Turning off quota for space default..."
    ## eos -b space quota default off
    ## handle_exit_condition $? "Error turning off quota for space default"

    # Set recycle bin # @todo review
    eos chmod 3711 /eos/dockertest/proc/recycle # drwx--s--+   1 root     root
    eos chmod 2755 /eos                         # drwxr-sr-+   1 root     root
    eos attr set default=replica /eos
    eos attr set sys.recycle="/eos/${EOS_INSTANCE_NAME:3}/proc/recycle/" /eos/
    eos recycle config --size 10G
    eos recycle config --inodes 10M
    eos recycle config --lifetime 604800        # a week
    eos recycle config --ratio 0.2

    ### Save config and leave
    echo "INFO: Saving configuration..."
    eos -b config save instance_bootstrap -f
    eos -b config save default -f
    handle_exit_condition $? "Error saving configuration"

    exit 0

    # useradd eos_k8s_admin
    # eos -b vid set membership eos_k8s_admin +sudo

